

// ==== FILE: /Users/dengjianyuan/work/projects/study/react/yuanbao-note-viewer/src/hooks/useNotes.js ==== 
import { useState, useEffect } from 'react'
import { extractTitle } from '../utils/noteUtils.js'
import { noteFiles } from '../utils/noteFiles.js'
import sanitizeHtml from 'sanitize-html'

export function useNotes() {
  const [notes, setNotes] = useState([])
  const [selectedNote, setSelectedNote] = useState(null)

  useEffect(() => {
    // Load notes from public/notes/
    const loadNotes = async () => {
      try {
        const loadedNotes = await Promise.all(
          noteFiles.map(async (file) => {
            const response = await fetch(`/notes/${file}`)
            const content = await response.text()
            const cleanContent = sanitizeHtml(content, {
              allowedTags: sanitizeHtml.defaults.allowedTags.concat(['h3', 'table', 'thead', 'tbody', 'tr', 'th', 'td', 'hr', 'ol', 'ul', 'li', 'blockquote']),
              allowedAttributes: {
                '*': ['class'],
                div: ['style'],
                table: ['style'],
                th: ['style'],
                td: ['style'],
              },
              allowedStyles: {
                '*': {
                  'font-family': [/^.*$/],
                  'font-size': [/^.*$/],
                  'color': [/^.*$/],
                  'line-height': [/^.*$/],
                  'padding': [/^.*$/],
                  'margin': [/^.*$/],
                  'text-align': [/^.*$/],
                  'font-weight': [/^.*$/],
                  'font-style': [/^.*$/],
                  'background-color': [/^.*$/],
                  'border': [/^.*$/],
                  'width': [/^.*$/],
                  'white-space': [/^.*$/],
                  'word-break': [/^.*$/],
                  'display': [/^.*$/],
                  'box-sizing': [/^.*$/],
                },
              },
              transformTags: {
                style: () => ({ tagName: '', attribs: {}, text: '' }),
              },
            })
            const title = extractTitle(cleanContent)
            const timestamp = parseTimestamp(file)
            return {
              id: file,
              title,
              content: cleanContent,
              createdAt: timestamp,
            }
          })
        )

        // Sort notes by createdAt (descending)
        const sortedNotes = loadedNotes.sort(
          (a, b) => b.createdAt - a.createdAt
        )
        setNotes(sortedNotes)

        // Select the most recent note by default
        if (sortedNotes.length > 0) {
          setSelectedNote(sortedNotes[0])
        }
      } catch (error) {
        console.error('Error loading notes:', error)
      }
    }

    loadNotes()
  }, [])

  const selectNote = (note) => {
    setSelectedNote(note)
  }

  const addNote = (filename, content) => {
    const cleanContent = sanitizeHtml(content, {
      allowedTags: sanitizeHtml.defaults.allowedTags.concat(['h3', 'table', 'thead', 'tbody', 'tr', 'th', 'td', 'hr', 'ol', 'ul', 'li', 'blockquote']),
      allowedAttributes: {
        '*': ['class'],
        div: ['style'],
        table: ['style'],
        th: ['style'],
        td: ['style'],
      },
      allowedStyles: {
        '*': {
          'font-family': [/^.*$/],
          'font-size': [/^.*$/],
          'color': [/^.*$/],
          'line-height': [/^.*$/],
          'padding': [/^.*$/],
          'margin': [/^.*$/],
          'text-align': [/^.*$/],
          'font-weight': [/^.*$/],
          'font-style': [/^.*$/],
          'background-color': [/^.*$/],
          'border': [/^.*$/],
          'width': [/^.*$/],
          'white-space': [/^.*$/],
          'word-break': [/^.*$/],
          'display': [/^.*$/],
          'box-sizing': [/^.*$/],
        },
      },
      transformTags: {
        style: () => ({ tagName: '', attribs: {}, text: '' }),
      },
    })
    const title = extractTitle(cleanContent)
    const timestamp = parseTimestamp(filename) || Date.now()
    const newNote = {
      id: filename,
      title,
      content: cleanContent,
      createdAt: timestamp,
    }
    setNotes((prevNotes) => {
      const updatedNotes = [newNote, ...prevNotes].sort(
        (a, b) => b.createdAt - a.createdAt
      )
      setSelectedNote(newNote)
      return updatedNotes
    })
  }

  return { notes, selectedNote, selectNote, addNote }
}

// Parse timestamp from filename (e.g., note-20250512123045.html)
function parseTimestamp(filename) {
  const match = filename.match(/note-(\d{14})\.html/)
  if (!match) return Date.now()
  const [year, month, day, hour, minute, second] = [
    match[1].slice(0, 4),
    match[1].slice(4, 6),
    match[1].slice(6, 8),
    match[1].slice(8, 10),
    match[1].slice(10, 12),
    match[1].slice(12, 14),
  ]
  return new Date(`${year}-${month}-${day}T${hour}:${minute}:${second}`).getTime()
}

// ==== FILE: /Users/dengjianyuan/work/projects/study/react/yuanbao-note-viewer/src/App.jsx ==== 
import React from 'react'
import Home from './pages/Home.jsx'

function App() {
  return (
      <Home />
  )
}

export default App

// ==== FILE: /Users/dengjianyuan/work/projects/study/react/yuanbao-note-viewer/src/pages/Home.jsx ==== 
import React, { useState } from "react";
import Sidebar from "../components/Sidebar.jsx";
import NoteContent from "../components/NoteContent.jsx";
import { useNotes } from "../hooks/useNotes.js";

function Home() {
  const { notes, selectedNote, selectNote } = useNotes();
  const [isSidebarOpen, setIsSidebarOpen] = useState(false);

  return (
    <div className="yb-layout agent-layout layout-pc flex flex-row">
      <Sidebar
        notes={notes}
        selectNote={selectNote}
        selectedNote={selectedNote}
        isSidebarOpen={isSidebarOpen}
        setIsSidebarOpen={setIsSidebarOpen}
      />
      <NoteContent note={selectedNote} onClick={() => setIsSidebarOpen(false)} />
    </div>
  );
}

export default Home;

// ==== FILE: /Users/dengjianyuan/work/projects/study/react/yuanbao-note-viewer/src/components/NoteContent.jsx ==== 
import React from "react";

function NoteContent({ note, onClick }) {
  if (!note) {
    return (
      <div className="text-gray-500" onClick={onClick}>
        Select a note to view
      </div>
    );
  }

  return (
    <div
      className="yb-layout__content agent-layout__content"
      onClick={onClick}
    >
      <div className="agent-dialogue">
        <div className="agent-dialogue__content-wrapper">
          <div className="agent-dialogue__content">
            <div className="agent-dialogue__content--common">
              <div
                className="agent-dialogue__content--common__content"
                id="chat-content"
              >
                <div className="agent-chat__list">
                  <div className="agent-chat__list__content-wrapper">
                    <div
                      className="agent-chat__list__content"
                      style={{ marginRight: "0px" }}
                    >
                      <div
                        className="agent-chat__list__item agent-chat__list__item--ai agent-chat__list__item--last p-0"
                        data-conv-idx="158"
                        data-conv-speaker="ai"
                        data-conv-speech-mode="0"
                        data-conv-sensitive="false"
                        data-conv-id="b5e1d739-7f95-4221-bc59-0c8cf5dda717_158"
                      >
                        <div className="agent-chat__list__item__content">
                          <div className="agent-chat__bubble agent-chat__bubble--ai">
                            <div className="agent-chat__bubble__content">
                              <div
                                className="agent-chat__conv--ai__speech_show"
                                data-conv-index="79"
                                data-speech-index="0"
                              >
                                <div
                                  className="hyc-component-reasoner"
                                  dangerouslySetInnerHTML={{
                                    __html: note.content,
                                  }}
                                ></div>
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                      <div className="agent-chat__list__placeholder"></div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

export default NoteContent;

// ==== FILE: /Users/dengjianyuan/work/projects/study/react/yuanbao-note-viewer/src/components/Sidebar.jsx ==== 
import React, { useState } from "react";

function Sidebar({
  notes,
  selectNote,
  isSidebarOpen,
  selectedNote,
  setIsSidebarOpen,
}) {
  const toggleSidebar = () => {
    const newState = !isSidebarOpen;
    setIsSidebarOpen(newState); // 同步状态到父组件
  };

  return (
    <div>
      {/* 悬浮按钮 */}
      <button
        className="fixed bottom-4 right-4 z-50 p-3 bg-blue-500 text-white rounded-full shadow-lg md:hidden"
        onClick={toggleSidebar}
      >
        {isSidebarOpen ? "Close" : "Open"}
      </button>

      {/* Sidebar */}
      <div
        className={`fixed top-0 left-0 h-full w-64 bg-white shadow-lg transform transition-transform ${
          isSidebarOpen ? "translate-x-0 z-10" : "-translate-x-full"
        } md:translate-x-0 md:relative md:block`}
      >
        <div className="p-4">
          <h2 className="text-lg font-semibold">Notes</h2>
        </div>
        <ul className="overflow-y-auto h-[calc(100vh-64px)]">
          {notes.map((note) => (
            <li
              key={note.id}
              className={`p-4 cursor-pointer hover:bg-gray-100 ${
                selectedNote && selectedNote.id === note.id ? "bg-gray-200" : ""
              }`}
              onClick={() => selectNote(note)}
            >
              <span className="text-sm">{note.title || "Untitled"}</span>
              <p className="text-xs text-gray-500">
                {new Date(note.createdAt).toLocaleString()}
              </p>
            </li>
          ))}
        </ul>
      </div>
    </div>
  );
}

export default Sidebar;
